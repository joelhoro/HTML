<Query Kind="Program">
  <NuGetReference>CsvHelper</NuGetReference>
  <NuGetReference>Newtonsoft.Json</NuGetReference>
  <Namespace>Newtonsoft.Json</Namespace>
</Query>

public class SalesRecord {

	public DateTime OrderDate { get; set; }
	public string Region { get; set; }
	public string Rep { get; set; }
	public string Item { get; set; }
	public double Units { get; set; }
	public double UnitCost { get; set; }
	public double Total { get; set; }

}

public class JSDoc {

	public string code = "";
	
	public string Contents() {
		return code;
	}
	public string Write(string fileName= "") {
		if(fileName=="")
			fileName = Path.GetRandomFileName() + ".js";

		File.WriteAllText(fileName,Contents());
		return fileName;
	}
	
	public static string TableVariableName =  "htmldocTable_{0:d2}";

	public static IEnumerable<object> FlattenObject<T>(T row) {
		return row
			.GetType()
			.GetProperties()
			.Select(p => p.GetValue(row));
	}

	public void AddTable<T>(IEnumerable<string> headers, IEnumerable<T> rows, int tableCount) {
		var flatRows = rows.Select(r => FlattenObject<T>(r));
		AddTable(headers,flatRows,tableCount);
	}
	
	public void AddTable(IEnumerable<string> headers, IEnumerable<IEnumerable<object>> rows, int tableCount) {
		var tableName = string.Format(TableVariableName,tableCount);
		code += string.Format( @"
		var {2} = function() {{
			// auto-generated by HtmlDoc
			var headers = {0};
			var data = {1};
			return {{ headers: headers, data: data, link : '#{2}' }};
		}}();
		", JsonConvert.SerializeObject(headers), JsonConvert.SerializeObject(rows), tableName );
	}
	
}


public class HTMLDoc {

	private List<string> _jsLinks = new List<string>();
	private List<string> _cssLinks = new List<string>();

	private string body = ""; 

	private static string JSLink(string link) {
		return string.Format("\t<script src='{0}'></script>\n", link );
	}
	
	private static string CSSLink(string link ) {
		return string.Format("\t<link href='{0}' rel='stylesheet'>\n",link);
	}
	
	private string JSInitialization() {
		var jsbody = initializationJs;
		for(int i = 0; i < tableCount; i++ ) {
			var variableName = String.Format(JSDoc.TableVariableName, i);
			jsbody += string.Format("\tDataInfoToTable({0});\n",variableName);
			// TODO: clean up
			jsbody += string.Format(@"
				var {0}_alldata= [{0}.headers].concat({0}.data);
				var {0}_csv_link = CsvLink({0}_alldata,'data.csv');
				{0}_csv_link.textContent = '[csv]';
				$('#{0}-csv').append({0}_csv_link);
				var {0}_link = JsonLink({0}_alldata,'data.json');
				{0}_link.textContent = '[json]';
				$('#{0}-json').append({0}_link);
			", variableName);
			
		}
		var initialization = String.Format( @"
	<script>
	// initialization
	$(document).ready( function() {{
		{0}	}} );
	</script>
		", jsbody);
		return initialization;
	}
	
	private string initializationJs = "";

	public void AddJSLink(string link) { _jsLinks.Add(link); }
	public void AddCSSLink(string link) { _cssLinks.Add(link); }
	public void AddToJSInitialization(string code) { initializationJs += code + "\n"; }
	public void AddToBody(string html) { body += html + "\n"; }

	private JSDoc jsDoc = new JSDoc();

	private int tableCount = 0;
	
	public void AddTable<T>(IEnumerable<string> headers, IEnumerable<T> rows) {
		var flatRows = rows.Select(r => JSDoc.FlattenObject<T>(r));
		AddTable(headers,flatRows);	
	}
	
	public void AddTable(IEnumerable<string> headers, IEnumerable<IEnumerable<object>> rows) {
		jsDoc.AddTable(headers, rows, tableCount);
		var tableVariableName = string.Format(JSDoc.TableVariableName, tableCount++);
		body += string.Format( @"
			<table id='{0}' class='table bootstrap-table table-striped table-hover'>
				<thead></thead><tbody></tbody>
			</table>
		", tableVariableName);
		var addLink = true;
		if(addLink) {
			body += string.Format("<div id='{0}-csv'></div>", tableVariableName);
			body += string.Format("<div id='{0}-json'></div>", tableVariableName);
		}
	}

	public string Contents() {
		var contents = "<html>\n<head>\n";
		foreach(var link in _cssLinks) { contents += CSSLink(link); }
		
		contents += "</head>\n\n";
		contents += "<body>\n" + body + "</body>\n";
		
		foreach(var link in _jsLinks) { contents += JSLink(link); }
		var jsFileName = jsDoc.Write(string.Format("data\\htmldoc_data_{0:yy-MM-dd-HHmmss}.js",DateTime.Now));
		contents += JSLink(jsFileName);		
		contents += JSInitialization();
		
		return contents;
	}

	public string Write(string fileName = "") {
		if(fileName=="")
			fileName = Path.GetRandomFileName() + ".html";
		File.WriteAllText(fileName,Contents());
		return fileName;
	}
}


void Main()
{
	Directory.SetCurrentDirectory(@"c:\Users\joel\Dropbox\Programming\HTML");
	
	var jsdoc = new JSDoc();
//	var headers = new List<string>() { "AAA", "BBB", "CCC" };
//	var table = new List<List<object>>() {
//		new List<object>() { "XXX", 123, 5.4 },
//		new List<object>() { "YuY", 54, 63 },
//		new List<object>() { "YuY", DateTime.Now, 63 }
//	};
	
	var csvFile = @"sample data\sampledata.csv";
	var reader = new StreamReader(csvFile);

	var csv = new CsvHelper.CsvReader(reader);
	csv.Configuration.AutoMap<SalesRecord>();
	var headers = typeof(SalesRecord).GetProperties().Select(p => p.Name);
	var records = csv.GetRecords<SalesRecord>().ToList();
	
	var htmldoc = new HTMLDoc();
	htmldoc.AddCSSLink("bootstrap/css/bootstrap.css");
	htmldoc.AddCSSLink("bootstrap/css/bootstrap-responsive.css");
	htmldoc.AddJSLink("bootstrap/js/jquery.js");
	htmldoc.AddJSLink("bootstrap/js/bootstrap.js");
	// 
	htmldoc.AddJSLink("htmldoc_utils.js");
		
	htmldoc.AddToBody("<H1>Table</H1>");
	htmldoc.AddTable<SalesRecord>(headers,records);
	
	htmldoc.AddToBody(string.Format("Created at {0}",DateTime.Now.ToString()));

	var fileName = "htmlDoc.html";
	htmldoc.Write(fileName);
	Process.Start(fileName);
}

// Define other methods and classes here