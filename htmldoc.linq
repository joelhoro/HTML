<Query Kind="Program">
  <NuGetReference>CsvHelper</NuGetReference>
  <NuGetReference>Newtonsoft.Json</NuGetReference>
  <Namespace>Newtonsoft.Json</Namespace>
</Query>

public class SalesRecord {

	public DateTime OrderDate { get; set; }
	public string Region { get; set; }
	public string Rep { get; set; }
	public string Item { get; set; }
	public double Units { get; set; }
	public double UnitCost { get; set; }
	public double Total { get; set; }

}

public class JSDoc {

	public string code = "";
	
	public string Contents() {
		return code;
	}
	public string Write(string fileName= "") {
		if(fileName=="")
			fileName = Path.GetRandomFileName() + ".js";

		File.WriteAllText(fileName,Contents());
		return fileName;
	}
	
	public static string TableVariableName =  "htmldocTable_{0:d2}";

	public static IEnumerable<object> FlattenObject<T>(T row) {
		return row
			.GetType()
			.GetProperties()
			.Select(p => p.GetValue(row));
	}

	public void AddTable<T>(IEnumerable<string> headers, IEnumerable<T> rows, int tableCount) {
		var flatRows = rows.Select(r => FlattenObject<T>(r));
		AddTable(headers,flatRows,tableCount);
	}
	
	public void AddTable(IEnumerable<string> headers, IEnumerable<IEnumerable<object>> rows, int tableCount) {
		var tableName = string.Format(TableVariableName,tableCount);
		code += string.Format( @"
		var {2} = function() {{
			// auto-generated by HtmlDoc
			var headers = {0};
			var data = {1};
			return {{ headers: headers, data: data, link : '#{2}' }};
		}}();
		", JsonConvert.SerializeObject(headers), JsonConvert.SerializeObject(rows), tableName );
	}
	
}


public interface HTMLComponent {
	string ToHTML();
	string ToHTML(bool verbose);
}

public abstract class HTMLComponentBase : HTMLComponent {
	public virtual string ToHTML() {
		throw new NotImplementedException();
	}
	public string ToHTML(bool verbose) {
		if(verbose)
			return string.Format("<!-- Begin {0} -->\n{1}<!-- End {0} -->\n", GetType().Name, ToHTML() );
		else
			return ToHTML();
	}
}

public class JSInclude : HTMLComponentBase {
	private string _link;
	public JSInclude(string link) {
		_link = link;
	}
	public override string ToHTML() {
		return string.Format("\t<script src='{0}'></script>\n", _link );
	}
	
	public override string ToString() {
		return string.Format("JSInclude[{0}]", _link);
	}
}

public class CSSInclude : HTMLComponentBase {
	private string _link;
	public CSSInclude(string link) {
		_link = link;
	}
	public override string ToHTML() {
		return string.Format("\t<link href='{0}' rel='stylesheet'>\n",_link);
	}
	public override string ToString() {
		return string.Format("CSSInclude[{0}]", _link);
	}
}

public class HTML : HTMLComponentBase {
	private string _html;
	public HTML(string html) {
		_html = html;
	}
	public override string ToHTML() {
		return _html;
	}
	
	public override string ToString() {
		return string.Format("HTML[{0}]", _html);
	}
}

public class JScript : HTMLComponentBase {
	private string _code;
	public JScript(string code) {
		_code = code;
	}
	public override string ToHTML() {
		return String.Format("<script>\n{0}\n</script>\n", _code);
	}
	
	public override string ToString() {
		return string.Format("JScript[{0}]", _code);
	}
}

public class HTMLDoc {

	private List<string> _jsLinks = new List<string>();
	private List<string> _cssLinks = new List<string>();

	private List<HTMLComponent> components = new List<HTMLComponent>();
	public bool VerboseHTML = false;
	
	private JScript JSInitialization() {
		var jsbody = initializationJs;
		for(int i = 0; i < tableCount; i++ ) {
			var variableName = String.Format(JSDoc.TableVariableName, i);
			jsbody += string.Format("\tDataInfoToTable({0});\n",variableName);
			// TODO: clean up
			jsbody += string.Format(@"
				var {0}_alldata= [{0}.headers].concat({0}.data);
				var {0}_csv_link = CsvLink({0}_alldata,'data.csv');
				{0}_csv_link.textContent = '[csv]';
				$('#{0}').append({0}_csv_link);
				var {0}_link = JsonLink({0}_alldata,'data.json');
				{0}_link.textContent = '[json]';
				$('#{0}').append({0}_link);
			", variableName);
			
		}
		var initialization = String.Format( @"
	// initialization
	$(document).ready( function() {{
		{0}	}} );
		", jsbody);
		return new JScript(initialization);
	}
	
	private string initializationJs = "";

	public void AddJSLink(string link) { Add(new JSInclude(link)); }
	public void AddCSSLink(string link) { Add(new CSSInclude(link)); }
	public void AddToJSInitialization(string code) { initializationJs += code + "\n"; }
	public void AddToBody(string html) { Add(new HTML(html + "\n")); }

	public void Add(HTMLComponent component) { components.Add(component); }

	private JSDoc jsDoc = new JSDoc();

	private int tableCount = 0;
	
	public void AddTable<T>(IEnumerable<string> headers, IEnumerable<T> rows) {
		var flatRows = rows.Select(r => JSDoc.FlattenObject<T>(r));
		AddTable(headers,flatRows);	
	}
	
	public void AddTable(IEnumerable<string> headers, IEnumerable<IEnumerable<object>> rows) {
		jsDoc.AddTable(headers, rows, tableCount);
		var tableVariableName = string.Format(JSDoc.TableVariableName, tableCount++);
		var addLink = true;
		var html = "";
		if(addLink)
			html += string.Format("<div id='{0}'></div>", tableVariableName);
		html += string.Format( @"
			<table id='{0}' class='table bootstrap-table table-striped table-hover'>
				<thead></thead><tbody></tbody>
			</table>
		", tableVariableName);
		Add(new HTML(html));
	}

	public HTMLDoc() {
		Add(new HTML("<html>\n<head>\n"));
	}

	public void StartBody() {
		Add(new HTML("</head>\n\n"));
		Add(new HTML("<body>\n"));
	}
	
	public void EndBody() {
		Add(new HTML("</body>\n\n"));
	}
	
	public List<HTMLComponent> Components() {
		var allcomponents = components.ToList();
		var jsFileName = jsDoc.Write(string.Format("data\\htmldoc_data_{0:yy-MM-dd-HHmmss}.js",DateTime.Now));
		allcomponents.Add(new JSInclude(jsFileName));		
		allcomponents.Add(JSInitialization());
		return allcomponents;
	}
	
	public string Contents() {
		var contents = "";
		foreach(var cpnt in Components()) {
			contents += cpnt.ToHTML(VerboseHTML);
		}
		
		return contents;
	}

	public string Write(string fileName = "") {
		if(fileName=="")
			fileName = Path.GetRandomFileName() + ".html";
		File.WriteAllText(fileName,Contents());
		return fileName;
	}
}


void Main()
{
	Directory.SetCurrentDirectory(@"c:\Users\joel\Dropbox\Programming\HTML");
	
	var jsdoc = new JSDoc();
//	var headers = new List<string>() { "AAA", "BBB", "CCC" };
//	var table = new List<List<object>>() {
//		new List<object>() { "XXX", 123, 5.4 },
//		new List<object>() { "YuY", 54, 63 },
//		new List<object>() { "YuY", DateTime.Now, 63 }
//	};
	
	var csvFile = @"sample data\sampledata.csv";
	var reader = new StreamReader(csvFile);

	var csv = new CsvHelper.CsvReader(reader);
	csv.Configuration.AutoMap<SalesRecord>();
	var headers = typeof(SalesRecord).GetProperties().Select(p => p.Name);
	var records = csv.GetRecords<SalesRecord>().ToList();
	
	var htmldoc = new HTMLDoc();
	htmldoc.AddCSSLink("bootstrap/css/bootstrap.css");
	htmldoc.AddCSSLink("bootstrap/css/bootstrap-responsive.css");
	htmldoc.AddJSLink("bootstrap/js/jquery.js");
	htmldoc.AddJSLink("bootstrap/js/bootstrap.js");
	// 
	htmldoc.AddJSLink("htmldoc_utils.js");
		
	htmldoc.AddToBody("<H1>Table</H1>");
	htmldoc.AddTable<SalesRecord>(headers,records);
	
	htmldoc.AddToBody(string.Format("Created at {0}",DateTime.Now.ToString()));
	htmldoc.Components();
	htmldoc.Components();
	htmldoc.Components();
	htmldoc.Components();

	var fileName = "htmlDoc.html";
	htmldoc.Write(fileName);
	Process.Start(fileName);
}

// Define other methods and classes here